<h2>Tarefas</h2>

<div class="section">
  <table id="tasksTable">
    <thead>
      <tr>
        <th>üìù T√≠tulo</th>
        <th>üìä Status</th>
        <th>üìÖ Prazo</th>
        <th>üìà Progresso</th>
        <th>‚≠ê Import√¢ncia</th>
        <th>üîß A√ß√µes</th>
      </tr>
    </thead>
    <tbody>
      <tr><td colspan="6" class="loading">‚è≥ Carregando tarefas...</td></tr>
    </tbody>
  </table>
  <button id="refreshTasksBtn">üîÑ Atualizar Lista</button>
</div>

<div class="section">
  <h3>Nova Tarefa</h3>
  <form id="taskForm" autocomplete="off">
    <label>Usu√°rio
      <select id="userSelect"></select>
    </label>
    <label>Categoria
      <select id="categorySelect"></select>
    </label>
    <label>Origem
      <select id="originSelect"></select>
    </label>
    <label>T√≠tulo
      <input type="text" id="title" required />
    </label>
    <label>Descri√ß√£o
      <textarea id="description"></textarea>
    </label>
    <label>Status
      <select id="status">
        <option value="">--Selecione--</option>
        <option value="pendente">Pendente</option>
        <option value="em andamento">Em Andamento</option>
        <option value="concluida">Conclu√≠da</option>
      </select>
    </label>
    <label>Data Desejada
      <input type="date" id="desired_date" />
    </label>
    <label>Data Limite
      <input type="date" id="deadline" />
    </label>
    <label>Import√¢ncia (1-5)
      <input type="number" id="importance" min="1" max="5" />
    </label>
    <label>Progresso (%)
      <input type="number" id="progress" min="0" max="100" />
    </label>
    <input type="submit" value="‚úÖ Cadastrar Tarefa" />
  </form>
  <div id="taskFormMsg"></div>
</div>

<script>
  const tasksEndpoint = '/api/tarefas';
  const usersEndpoint = '/api/users';
  const categoriesEndpoint = '/api/categorias';
  const originsEndpoint = '/api/origens';

  async function loadTasks() {
    try {
      const res = await fetch(tasksEndpoint);
      const data = await res.json();
      const tbody = document.querySelector('#tasksTable tbody');
      tbody.innerHTML = '';
      if (data.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="empty-state">Nenhuma tarefa cadastrada ainda</td></tr>';
        return;
      }
      data.forEach(t => {
        const row = document.createElement('tr');

        // Status badge
        let statusBadge = '';
        if (t.status) {
          const statusClass = `status-${t.status.replace(' ', '-')}`;
          statusBadge = `<span class="status-badge ${statusClass}">${t.status}</span>`;
        }

        // Progress bar
        const progress = t.progress || 0;
        const progressBar = `
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progress}%"></div>
          </div>
          <small>${progress}%</small>
        `;

        // Importance stars
        const importance = t.importance || 0;
        let importanceStars = '<div class="importance-indicator">';
        for (let i = 1; i <= 5; i++) {
          const filled = i <= importance ? 'filled' : '';
          importanceStars += `<span class="importance-star ${filled}">‚òÖ</span>`;
        }
        importanceStars += '</div>';

        row.innerHTML = `
          <td>
            <strong>${t.title}</strong>
            ${t.description ? `<br><small style="color: #666;">${t.description}</small>` : ''}
          </td>
          <td>${statusBadge}</td>
          <td>${t.deadline ? new Date(t.deadline).toLocaleDateString('pt-BR') : '-'}</td>
          <td>${progressBar}</td>
          <td>${importanceStars}</td>
          <td><button onclick="deleteTask('${t.id}')">üóëÔ∏è Excluir</button></td>
        `;
        tbody.appendChild(row);
      });
    } catch(err) {
      console.error(err);
    }
  }

  async function loadCategoriesSelect() {
    try {
      const res = await fetch(categoriesEndpoint);
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      const data = await res.json();
      const sel = document.getElementById('categorySelect');
      if (!sel) {
        throw new Error('Elemento categorySelect n√£o encontrado');
      }
      sel.innerHTML = '<option value="">--Selecione--</option>';
      data.forEach(c => {
        const opt = document.createElement('option');
        opt.value = c.id;
        opt.textContent = c.name;
        sel.appendChild(opt);
      });
    } catch (err) {
      console.error('Erro ao carregar categorias:', err);
    }
  }

  async function loadOriginsSelect() {
    try {
      const res = await fetch(originsEndpoint);
      const data = await res.json();
      const sel = document.getElementById('originSelect');
      sel.innerHTML = '<option value="">--Selecione--</option>';
      data.forEach(o => {
        const opt = document.createElement('option');
        opt.value = o.id;
        opt.textContent = o.name;
        sel.appendChild(opt);
      });
    } catch (err) {
      console.error(err);
    }
  }

  async function loadUsersSelect() {
    try {
      const res = await fetch(usersEndpoint);
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      const data = await res.json();
      const sel = document.getElementById('userSelect');
      if (!sel) {
        throw new Error('Elemento userSelect n√£o encontrado');
      }
      sel.innerHTML = '<option value="">--Selecione--</option>';
      data.forEach(u => {
        const opt = document.createElement('option');
        opt.value = u.id;
        opt.textContent = u.name;
        sel.appendChild(opt);
      });
    } catch (err) {
      console.error('Erro ao carregar usu√°rios:', err);
    }
  }

  document.getElementById('refreshTasksBtn').addEventListener('click', loadTasks);

  document.getElementById('taskForm').addEventListener('submit', async e => {
    e.preventDefault();
    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    const status = document.getElementById('status').value;
    const desired_date = document.getElementById('desired_date').value || null;
    const deadline = document.getElementById('deadline').value || null;
    const importance = document.getElementById('importance').value ? parseInt(document.getElementById('importance').value) : null;
    const progress = document.getElementById('progress').value ? parseInt(document.getElementById('progress').value) : null;
    const user_id = document.getElementById('userSelect').value || null;
    const category_id = document.getElementById('categorySelect').value || null;
    const origin_id = document.getElementById('originSelect').value || null;
    const msg = document.getElementById('taskFormMsg');
    msg.textContent = '';

    // Dados da tarefa que ser√£o enviados
    const taskData = { title, description, status, desired_date, deadline, importance, progress, user_id, category_id, origin_id };

    try {
      const res = await fetch(tasksEndpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(taskData)
      });
      if (!res.ok) {
        const errorText = await res.text();
        let err;
        try {
          err = JSON.parse(errorText);
        } catch (parseError) {
          throw new Error(`Erro do servidor (${res.status}): ${errorText}`);
        }
        if (err.errors && Array.isArray(err.errors)) {
          throw new Error(err.errors.join(', '));
        }
        throw new Error(err.error || err.message || `Erro no cadastro (${res.status})`);
      }
      msg.textContent = 'Tarefa cadastrada!';
      msg.className = 'success';
      e.target.reset();
      loadTasks();
    } catch(err) {
      console.error('Erro ao cadastrar tarefa:', err);
      msg.textContent = err.message;
      msg.className = 'error';
    }
  });

  async function deleteTask(id) {
    if (!confirm('Excluir tarefa?')) return;
    try {
      const res = await fetch(`${tasksEndpoint}/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error('Erro ao excluir');
      loadTasks();
    } catch(err) {
      alert(err.message);
    }
  }

  // Carrega os dados iniciais
  async function initializePage() {
    try {
      await Promise.all([
        loadUsersSelect(),
        loadCategoriesSelect(),
        loadOriginsSelect()
      ]);
      await loadTasks();
    } catch (error) {
      console.error('Erro ao inicializar p√°gina:', error);
    }
  }

  // Aguarda o DOM estar totalmente carregado
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePage);
  } else {
    initializePage();
  }
</script> 