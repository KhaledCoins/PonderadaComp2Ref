<h2>Agenda</h2>

<div class="section">
  <table id="agendaTable">
    <thead>
      <tr>
        <th>ID</th>
        <th>Task ID</th>
        <th>Início</th>
        <th>Fim</th>
        <th>Notas</th>
      </tr>
    </thead>
    <tbody>
      <tr><td colspan="5">Carregando...</td></tr>
    </tbody>
  </table>
  <button id="refreshAgendaBtn">Atualizar Lista</button>
</div>

<div class="section">
  <h3>Novo Registro de Agenda</h3>
  <form id="agendaForm" autocomplete="off">
    <label>ID da Tarefa
      <input type="text" id="taskId" required />
    </label>
    <label>Início
      <input type="datetime-local" id="startTime" />
    </label>
    <label>Fim
      <input type="datetime-local" id="endTime" />
    </label>
    <label>Notas
      <textarea id="notes"></textarea>
    </label>
    <input type="submit" value="Cadastrar" />
  </form>
  <div id="agendaFormMsg"></div>
</div>

<script>
  const agendaEndpoint = '/api/agendas';
  const tasksEndpoint = '/api/tarefas';

  async function loadAgenda() {
    try {
      const [agendaRes, tasksRes] = await Promise.all([fetch(agendaEndpoint), fetch(tasksEndpoint)]);
      const agendas = await agendaRes.json();
      const tasks = await tasksRes.json();
      const tbody = document.querySelector('#agendaTable tbody');
      tbody.innerHTML = '';
      const autoTasks = tasks.filter(t => t.deadline || t.desired_date);
      if (agendas.length === 0 && autoTasks.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5">Nenhum registro</td></tr>';
        return;
      }
      agendas.forEach(a => {
        const row = document.createElement('tr');
        row.innerHTML = `<td>${a.id}</td><td>${a.task_id}</td><td>${a.start_time || ''}</td><td>${a.end_time || ''}</td><td>${a.notes || ''}</td>`;
        tbody.appendChild(row);
      });
      autoTasks.forEach(t => {
        const date = t.deadline ? t.deadline.substring(0,10) : t.desired_date.substring(0,10);
        const row = document.createElement('tr');
        row.innerHTML = `<td>${t.id}</td><td>${t.id}</td><td>${date}</td><td></td><td>Automático</td>`;
        tbody.appendChild(row);
      });
    } catch (err) {
      console.error(err);
    }
  }

  document.getElementById('refreshAgendaBtn').addEventListener('click', loadAgenda);

  document.getElementById('agendaForm').addEventListener('submit', async e => {
    e.preventDefault();
    const task_id = document.getElementById('taskId').value;
    const start_time = document.getElementById('startTime').value;
    const end_time = document.getElementById('endTime').value;
    const notes = document.getElementById('notes').value;
    const msg = document.getElementById('agendaFormMsg');
    msg.textContent = '';
    try {
      const res = await fetch(agendaEndpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ task_id, start_time, end_time, notes })
      });
      if (!res.ok) {
        const err = await res.json();
        throw new Error(err.error || 'Erro ao cadastrar');
      }
      msg.textContent = 'Registro cadastrado!';
      msg.className = 'success';
      e.target.reset();
      loadAgenda();
    } catch (err) {
      msg.textContent = err.message;
      msg.className = 'error';
    }
  });

  loadAgenda();
</script> 